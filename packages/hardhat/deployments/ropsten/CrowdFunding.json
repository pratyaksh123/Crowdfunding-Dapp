{
  "address": "0xdd56D649a0C1dd6fD78E4dbf0C2b84d3afAEc1a6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "durationInDays",
          "type": "uint256"
        }
      ],
      "name": "createNewProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract Project",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnAllProjects",
      "outputs": [
        {
          "internalType": "contract Project[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6653be14238a071479f94d67da8495428cf07c84b0cb2a617f73f8643d366d4",
  "receipt": {
    "to": null,
    "from": "0x097644C1A133C736543C4D49A2Ee791FDaDFA82a",
    "contractAddress": "0xdd56D649a0C1dd6fD78E4dbf0C2b84d3afAEc1a6",
    "transactionIndex": 6,
    "gasUsed": "981192",
    "logsBloom": "0x
    "blockHash": "0x4475c9572ce23f1ce243172a3fd1fe7e316b056e05380ae5dc08380ed454912b",
    "transactionHash": "0xe6653be14238a071479f94d67da8495428cf07c84b0cb2a617f73f8643d366d4",
    "logs": [],
    "blockNumber": 10799530,
    "cumulativeGasUsed": "1441517",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fc41d1c3a9af8a0bfb20a0fd2f6e2d01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"}],\"name\":\"createNewProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract Project\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAllProjects\",\"outputs\":[{\"internalType\":\"contract Project[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\nimport \\\"./Project.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract CrowdFunding {\\n    using SafeMath for uint256;\\n    Project[] public projects;\\n\\n    function createNewProject(uint goal, string memory title, string memory description, uint durationInDays) public {\\n        uint raiseUntil = block.timestamp.add(durationInDays.mul(1 days));\\n        Project newProject = new Project(goal, title, description, msg.sender, raiseUntil);\\n        projects.push(newProject);\\n        // emit NewProjectCreated(goal, title, description, raiseUntil);\\n    }\\n\\n    function returnAllProjects() external view returns(Project[] memory){\\n        return projects;\\n    }\\n}\",\"keccak256\":\"0x83fe0535dba39d5ad8e3f1475697a379861451f350b0e23475d3abb0abce5bf9\",\"license\":\"MIT\"},\"contracts/Project.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n//SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Project is Ownable {\\n  using SafeMath for uint256;\\n  enum State{\\n    Ongoing,\\n    Expired,\\n    Completed\\n  }\\n\\n  // State Variables\\n  uint public goal; // amount in ether\\n  string public title;\\n  uint public deadline;\\n  string public description;\\n  State public state = State.Ongoing;\\n  mapping (address=>uint) contributors; // contributors\\n\\n  constructor(uint _goal, string memory _title, string memory _description, address _creator, uint _deadline) {\\n    goal = _goal;\\n    title = _title;\\n    description = _description;\\n    deadline = _deadline;\\n    transferOwnership(_creator);\\n  }\\n\\n  modifier inState(State _state) {\\n    require(state == _state);\\n    _;\\n  }\\n\\n  function contribute() external inState(State.Ongoing) payable {\\n    require(msg.sender != owner());\\n    contributors[msg.sender] = contributors[msg.sender].add(msg.value);\\n    // emit FundingRecieved(msg.sender, msg.value, balance);\\n    isComplete();\\n  }\\n\\n  function isComplete() public {\\n    uint balance = address(this).balance;\\n    if (balance >= goal){\\n      state = State.Completed;\\n      // emit ProjectCompleted(msg.sender, balance, goal);\\n      payCreator();\\n    }\\n    else if(block.timestamp > deadline){\\n      state = State.Expired;\\n    }\\n  }\\n\\n  function payCreator() internal inState(State.Completed) returns(bool) {\\n    address payable creator = payable(owner());\\n    uint balance = address(this).balance;\\n    // Maybe the balance exceeded the goal, so we need to update the goal.\\n    goal = balance;\\n    if (creator.send(balance)){\\n      // emit CreatorPaid(creator, balance);\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function balanceOf()public view returns(uint){\\n    return address(this).balance;\\n  }\\n\\n  function fetchContributors(address _contributor) public view returns(uint){\\n    return contributors[_contributor];\\n  }\\n  \\n  function refund() public inState(State.Expired) {\\n    require(contributors[msg.sender] > 0);\\n    uint amountToRefund = contributors[msg.sender];\\n    contributors[msg.sender] = 0;\\n    if(payable(msg.sender).send(amountToRefund)){\\n      // emit FundingRefunded(msg.sender, amountToRefund, address(this).balance);\\n    }else{\\n      contributors[msg.sender] = amountToRefund;\\n    }\\n  }\\n\\n  function expireAndRefund() public inState(State.Ongoing) {\\n    state = State.Expired;\\n    refund();\\n  }\\n}\",\"keccak256\":\"0x7e71f0f0ee2bd2b83bd7f79f74a909f29e6d91e4c0e05a644c144c201fc96682\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110d2806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063107046bd146200004b57806336ba856f146200007f57806385b6e28e1462000098575b600080fd5b620000626200005c366004620002b7565b620000b1565b6040516001600160a01b0390911681526020015b60405180910390f35b6200009662000090366004620002d0565b620000dc565b005b620000a262000193565b60405162000076919062000397565b60008181548110620000c257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000620000f9620000f18362015180620001f7565b42906200020c565b90506000858585338560405162000110906200021a565b62000120959493929190620003e6565b604051809103906000f0801580156200013d573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055505050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015620001ed57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620001ce575b5050505050905090565b60006200020582846200044e565b9392505050565b600062000205828462000433565b610c00806200049d83390190565b600082601f83011262000239578081fd5b813567ffffffffffffffff8082111562000257576200025762000486565b604051601f8301601f19908116603f0116810190828211818310171562000282576200028262000486565b816040528381528660208588010111156200029b578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215620002c9578081fd5b5035919050565b60008060008060808587031215620002e6578283fd5b84359350602085013567ffffffffffffffff8082111562000305578485fd5b620003138883890162000228565b9450604087013591508082111562000329578384fd5b50620003388782880162000228565b949793965093946060013593505050565b60008151808452815b81811015620003705760208185018101518683018201520162000352565b81811115620003825782602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b81811015620003da5783516001600160a01b031683529284019291840191600101620003b3565b50909695505050505050565b85815260a0602082015260006200040160a083018762000349565b828103604084015262000415818762000349565b6001600160a01b039590951660608401525050608001529392505050565b6000821982111562000449576200044962000470565b500190565b60008160001904831182151516156200046b576200046b62000470565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe60806040526005805460ff191690553480156200001b57600080fd5b5060405162000c0038038062000c008339810160408190526200003e9162000313565b620000493362000095565b6001859055835162000063906002906020870190620001ba565b50825162000079906004906020860190620001ba565b5060038190556200008a82620000e5565b505050505062000404565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001ac5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200013c565b620001b78162000095565b50565b828054620001c890620003b1565b90600052602060002090601f016020900481019282620001ec576000855562000237565b82601f106200020757805160ff191683800117855562000237565b8280016001018555821562000237579182015b82811115620002375782518255916020019190600101906200021a565b506200024592915062000249565b5090565b5b808211156200024557600081556001016200024a565b600082601f83011262000271578081fd5b81516001600160401b03808211156200028e576200028e620003ee565b604051601f8301601f19908116603f01168101908282118183101715620002b957620002b9620003ee565b81604052838152602092508683858801011115620002d5578485fd5b8491505b83821015620002f85785820183015181830184015290820190620002d9565b838211156200030957848385830101525b9695505050505050565b600080600080600060a086880312156200032b578081fd5b855160208701519095506001600160401b03808211156200034a578283fd5b6200035889838a0162000260565b955060408801519150808211156200036e578283fd5b506200037d8882890162000260565b606088015190945090506001600160a01b03811681146200039c578182fd5b80925050608086015190509295509295909350565b600181811c90821680620003c657607f821691505b60208210811415620003e857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6107ec80620004146000396000f3fe6080604052600436106100dd5760003560e01c80637284e4161161007f578063b2fa1c9e11610059578063b2fa1c9e1461020a578063c19d93fb1461021f578063d7bb99ba14610246578063f2fde38b1461024e57600080fd5b80637284e416146101b85780638da5cb5b146101cd578063ab2c84e5146101f557600080fd5b80634a79d50c116100bb5780634a79d50c14610157578063590e1ae314610179578063715018a614610190578063722713f7146101a557600080fd5b806329dcb0cf146100e257806331306eb41461010b5780634019388314610141575b600080fd5b3480156100ee57600080fd5b506100f860035481565b6040519081526020015b60405180910390f35b34801561011757600080fd5b506100f86101263660046106b5565b6001600160a01b031660009081526006602052604090205490565b34801561014d57600080fd5b506100f860015481565b34801561016357600080fd5b5061016c61026e565b6040516101029190610704565b34801561018557600080fd5b5061018e6102fc565b005b34801561019c57600080fd5b5061018e610393565b3480156101b157600080fd5b50476100f8565b3480156101c457600080fd5b5061016c6103fe565b3480156101d957600080fd5b506000546040516001600160a01b039091168152602001610102565b34801561020157600080fd5b5061018e61040b565b34801561021657600080fd5b5061018e610455565b34801561022b57600080fd5b506005546102399060ff1681565b60405161010291906106dc565b61018e610493565b34801561025a57600080fd5b5061018e6102693660046106b5565b61050f565b6002805461027b9061077b565b80601f01602080910402602001604051908101604052809291908181526020018280546102a79061077b565b80156102f45780601f106102c9576101008083540402835291602001916102f4565b820191906000526020600020905b8154815290600101906020018083116102d757829003601f168201915b505050505081565b60018060055460ff16600281111561032457634e487b7160e01b600052602160045260246000fd5b1461032e57600080fd5b3360009081526006602052604090205461034757600080fd5b33600081815260066020526040808220805490839055905190929183156108fc02918491818181858888f1935050505015610380575050565b3360009081526006602052604090205550565b6000546001600160a01b031633146103f25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103fc60006105d3565b565b6004805461027b9061077b565b60008060055460ff16600281111561043357634e487b7160e01b600052602160045260246000fd5b1461043d57600080fd5b6005805460ff191660011790556104526102fc565b50565b60015447908110610479576005805460ff19166002179055610475610623565b5050565b60035442111561045257506005805460ff19166001179055565b60008060055460ff1660028111156104bb57634e487b7160e01b600052602160045260246000fd5b146104c557600080fd5b6000546001600160a01b03163314156104dd57600080fd5b336000908152600660205260409020546104f790346106a2565b33600090815260066020526040902055610452610455565b6000546001600160a01b031633146105695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e9565b6001600160a01b0381166105ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e9565b610452815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060028060055460ff16600281111561064d57634e487b7160e01b600052602160045260246000fd5b1461065757600080fd5b600080544760018190556040516001600160a01b0390921692909183916108fc841502918491818181858888f1935050505015610698576001935050505090565b6000935050505090565b60006106ae8284610757565b9392505050565b6000602082840312156106c6578081fd5b81356001600160a01b03811681146106ae578182fd5b60208101600383106106fe57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602080835283518082850152825b8181101561073057858101830151858201604001528201610714565b818111156107415783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561077657634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061078f57607f821691505b602082108114156107b057634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122099852efbae9c40120940e35f2d7c0cda340b492660b2ee2522de337498630cf864736f6c63430008040033a26469706673582212209eb426eda7642d0a6491b718429129107268f00847989f2e3f2c6cbc6733688164736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 447,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "projects",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(Project)777)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Project)777)dyn_storage": {
        "base": "t_contract(Project)777",
        "encoding": "dynamic_array",
        "label": "contract Project[]",
        "numberOfBytes": "32"
      },
      "t_contract(Project)777": {
        "encoding": "inplace",
        "label": "contract Project",
        "numberOfBytes": "20"
      }
    }
  }
}